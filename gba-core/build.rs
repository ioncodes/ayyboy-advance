use csv::Reader;

const TEMPLATE: &str = r#"// This file is automatically generated from the GBA cartridge database CSV file.
// Do not edit this file manually.

use phf::phf_map;

pub static TITLE_DATABASE: phf::Map<&'static str, (u8, bool, &'static str)> = phf_map! {
$DB$
};"#;

fn main() {
    let mut csv_reader =
        Reader::from_path("../external/titledb_mame.csv").expect("Failed to read GBA cartridge database CSV file");

    let mut table = String::new();

    for result in csv_reader.records().skip(1) {
        let record = result.expect("Failed to read record from CSV");
        let crc32 = record
            .get(0)
            .unwrap_or_else(|| panic!("Missing crc32 in record: {:?}", record));
        let backup_type = record
            .get(1)
            .unwrap_or_else(|| panic!("Missing backup_type in record: {:?}", record));
        let has_rtc = record
            .get(2)
            .unwrap_or_else(|| panic!("Missing has_rtc in record: {:?}", record));
        let game_title = record
            .get(3)
            .unwrap_or_else(|| panic!("Missing game_title in record: {:?}", record));

        table.push_str(&format!(
            "    \"{}\" => ({}, {}, r#\"{}\"#),\n",
            crc32,
            backup_type,
            if has_rtc == "1" { "true" } else { "false" },
            game_title
        ));
    }

    let output = TEMPLATE.replace("$DB$", &table);
    std::fs::write("src/cartridge/database.rs", output).expect("Failed to write cartridge database source file");
}
