use csv::Reader;

const TEMPLATE: &str = r#"// This file is automatically generated from the GBA cartridge database CSV file.
// Do not edit this file manually.

use phf::phf_map;

pub static TITLE_DATABASE: phf::Map<&'static str, (u8, &'static str)> = phf_map! {
$DB$
};"#;

fn main() {
    let mut csv_reader =
        Reader::from_path("../external/titledb.csv").expect("Failed to read GBA cartridge database CSV file");

    let mut table = String::new();

    for result in csv_reader.records() {
        let record = result.expect("Failed to read record from CSV");
        let title_id = record
            .get(0)
            .unwrap_or_else(|| panic!("Missing title_id in record: {:?}", record));
        let save_type = record
            .get(1)
            .unwrap_or_else(|| panic!("Missing save_type in record: {:?}", record));
        let game_title = record
            .get(2)
            .unwrap_or_else(|| panic!("Missing game_title in record: {:?}", record));

        table.push_str(&format!(
            "    \"{}\" => (0x{:02X}, \"{}\"),\n",
            title_id,
            u8::from_str_radix(save_type.trim_start_matches("0x"), 16)
                .unwrap_or_else(|_| { panic!("Invalid save_type '{}' in record: {:?}", save_type, record) }),
            game_title
        ));
    }

    let output = TEMPLATE.replace("$DB$", &table);
    std::fs::write("src/cartridge/database.rs", output).expect("Failed to write cartridge database source file");
}
